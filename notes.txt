Meeting Notes (6/2/17):
	Simple server implementation:
	- Download all  files from user's project to a folder
	- Run browserify on server in that folder

	Simple client implementation:
		- Store all source files in dummy vars (hard-coded)
	
	- Next step:
		- Build editor with:
			- Create new file button
			- Read/write from editor source to GCS/Firebase for persistence
			- Create project at URL
			- Retrieve project from URL 
		- Build file system
			- Potential Design:
				- Use firebase as Metadata
				- Use GCS for actual files/assets
				- Look into: has directory structure or just files?
					- If dirs: Just link to root directory
			- Project object as root
				- project name
				- project description
				- path to project root/folder in GCS
		- Firebase account
			- Use my existing account, then move to

			Milestones:
				- M1: Create source files by saving text from editor to GCS
					--> At this point, want to move to browserify tasks
				- M2: Create folders to structure code
				- M3: (Later/Eventually) Upload assets

Plan of attack:
	x Learn Redux/Vdux in depth, focusing on
		x middleware
		x dispatch
		x state

	State:
		
		- files: []

	Files
	- On startup:
		- If user has no previous project,
			- we create a single default file named index.js
			- we display its title in a tab inside a tab viewer
			- we display its contents in ace editor
			- we display its title in the file-tree viewer
	- When 'new file' button clicked: (implement the following, in order)
		- Create new tab in UI
			- with an empty Ace editor with 'untitled-i' as title
			- add 'untitled-i' to file tree viewer
	- When user clicks file name in the file tree viewer:
		- we create a new tab to display its contents

	// Create file, persistence tasks
		- Allow user to set the title of the file in the tab by clicking button or pressing button
		- Create temporary global firebase project (if possible without auth)
		- Save file title in firebase
			- add link to GCS
			- not linked to any project user auth stuff
		- Create empty file in GCS and save URL locally
		- Add/implement 'save' button to UI
	- Integrate basic firebase auth setup
		- Look at how pixelbots integrates firebase


On page load:
	- Check for project id store in cookie
		- If present, load project
		- If not
			- generate new project
			- save project id to cookie
		- create 'new project' button that clears cookie, and reloads UI

Process of bundling:
	- We have 1 or more user files
		- Each file in its own tab
		- Use one Ace instance, that gets its content swapped in/out
		- A tab bar that indicates which file is open
	- Each file is treated as its own namespace, and exports a module
	- There is a single file designated as the entry point
	- It requires packages, both local and 3rd-party 
			- how should we deal with / intercept 'relative requires'?
				- e.g. require ('./file2.js')
				- how do we feed the apropriate files into browserify?
				- how do we fetch the relevant file from our system?
					- is each file cached in browser? Google Cloud Storage?
	- What's preventing browserify from running in browser?
		- relies on node?

Features:
	x Get requirebin running locally
	x Build app scaffold in Vdux
	x Get Ace working in app
	X Mod requirebin source 
	x Get caching implemented
	- Learn Vdux/Redux
	- Add tabs/multiple files that can reference each other
	- Modify browser-module-sandbox to require/bundle multiple user files
	- Build prototype of Browserifying in client
	- Build prototype of Browserifying on server
	- Add line-locking
	- Add file tree / assets
	- Add more permi
	- Optimize
	- Mod/Build our own WZRD implementation

Sample User code:
var r = require('react')
var para = document.createElement("p");
var node = document.createTextNode(`Paragraph: ${new Date().getTime()}`);
para.appendChild(node);
var app = document.getElementById("app")
app.appendChild(para);


/////
var r = require('react')
console.log('Code running! ' + String(new Date().getTime()))


BOXSPRING DESCRIPTION
- User is always building website, so build app focused on editing JS/HTML
- Designed for teachers to construct codebases as starter projects / template for students to edit/fill in
- Key Features:
	- Full-featured Editor
	- Fast app builds
		- dependency management
		- Transform user code from ES6 -> ES5
		- Configure transformations
	- Permissions:
	 	- RWX permissions
		 	- On a file level
		 	- On a line-by-line level
	- Multiple files/tabs
	- Media Uploads
		- Asset management
		- Flat list of files with slashes to simulate directory tree
	- Publishing
		- Publish link to project, specific file, etc.
	- User data / persistence
		- Save/View past projects
		- View
- Advanced Features (Someday/Maybe)
	- Blurred out sections of code
	- Fill in the blank code (with specicic character widths)
	- Live reload/rendering of HTML/CSS/JS
	- Collaboration / Teacher can view/edit your editor environment